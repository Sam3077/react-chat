# source: http://localhost:4466
# timestamp: Wed Oct 10 2018 12:51:11 GMT-0600 (Mountain Daylight Time)

type AggregateChat {
  count: Int!
}

type AggregateConversation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Chat implements Node {
  id: ID!
  content: String
  from(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ChatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  content: String
  from: UserCreateOneInput!
}

input ChatCreateManyInput {
  create: [ChatCreateInput!]
  connect: [ChatWhereUniqueInput!]
}

"""An edge in a connection."""
type ChatEdge {
  """The item at the end of the edge."""
  node: Chat!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChatPreviousValues {
  id: ID!
  content: String
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
}

input ChatUpdateDataInput {
  content: String
  from: UserUpdateOneInput
}

input ChatUpdateInput {
  content: String
  from: UserUpdateOneInput
}

input ChatUpdateManyInput {
  create: [ChatCreateInput!]
  connect: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueNestedInput!]
  upsert: [ChatUpsertWithWhereUniqueNestedInput!]
}

input ChatUpdateWithWhereUniqueNestedInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateDataInput!
}

input ChatUpsertWithWhereUniqueNestedInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateDataInput!
  create: ChatCreateInput!
}

input ChatWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  from: UserWhereInput
}

input ChatWhereUniqueInput {
  id: ID
}

type Conversation implements Node {
  id: ID!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
}

"""A connection to a list of items."""
type ConversationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConversationEdge]!
  aggregate: AggregateConversation!
}

input ConversationCreateInput {
  users: UserCreateManyWithoutConversationsInput
  chats: ChatCreateManyInput
}

input ConversationCreateManyWithoutUsersInput {
  create: [ConversationCreateWithoutUsersInput!]
  connect: [ConversationWhereUniqueInput!]
}

input ConversationCreateWithoutUsersInput {
  chats: ChatCreateManyInput
}

"""An edge in a connection."""
type ConversationEdge {
  """The item at the end of the edge."""
  node: Conversation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ConversationOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConversationPreviousValues {
  id: ID!
}

type ConversationSubscriptionPayload {
  mutation: MutationType!
  node: Conversation
  updatedFields: [String!]
  previousValues: ConversationPreviousValues
}

input ConversationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConversationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConversationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConversationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConversationWhereInput
}

input ConversationUpdateInput {
  users: UserUpdateManyWithoutConversationsInput
  chats: ChatUpdateManyInput
}

input ConversationUpdateManyWithoutUsersInput {
  create: [ConversationCreateWithoutUsersInput!]
  connect: [ConversationWhereUniqueInput!]
  disconnect: [ConversationWhereUniqueInput!]
  delete: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutUsersInput!]
}

input ConversationUpdateWithoutUsersDataInput {
  chats: ChatUpdateManyInput
}

input ConversationUpdateWithWhereUniqueWithoutUsersInput {
  where: ConversationWhereUniqueInput!
  data: ConversationUpdateWithoutUsersDataInput!
}

input ConversationUpsertWithWhereUniqueWithoutUsersInput {
  where: ConversationWhereUniqueInput!
  update: ConversationUpdateWithoutUsersDataInput!
  create: ConversationCreateWithoutUsersInput!
}

input ConversationWhereInput {
  """Logical AND on all given filters."""
  AND: [ConversationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConversationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConversationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
}

input ConversationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createConversation(data: ConversationCreateInput!): Conversation!
  createUser(data: UserCreateInput!): User!
  createChat(data: ChatCreateInput!): Chat!
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  deleteConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteUser(where: UserWhereUniqueInput!): User
  deleteChat(where: ChatWhereUniqueInput!): Chat
  upsertConversation(where: ConversationWhereUniqueInput!, create: ConversationCreateInput!, update: ConversationUpdateInput!): Conversation!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  updateManyConversations(data: ConversationUpdateInput!, where: ConversationWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyChats(data: ChatUpdateInput!, where: ChatWhereInput): BatchPayload!
  deleteManyConversations(where: ConversationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyChats(where: ChatWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  conversation(where: ConversationWhereUniqueInput!): Conversation
  user(where: UserWhereUniqueInput!): User
  chat(where: ChatWhereUniqueInput!): Chat
  conversationsConnection(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConversationConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  conversation(where: ConversationSubscriptionWhereInput): ConversationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  username_lower: String!
  email: String!
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  username_lower: String!
  email: String!
  conversations: ConversationCreateManyWithoutUsersInput
}

input UserCreateManyWithoutConversationsInput {
  create: [UserCreateWithoutConversationsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutConversationsInput {
  username: String!
  username_lower: String!
  email: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  username_lower_ASC
  username_lower_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  username_lower: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  username_lower: String
  email: String
  conversations: ConversationUpdateManyWithoutUsersInput
}

input UserUpdateInput {
  username: String
  username_lower: String
  email: String
  conversations: ConversationUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutConversationsInput {
  create: [UserCreateWithoutConversationsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutConversationsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutConversationsInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithoutConversationsDataInput {
  username: String
  username_lower: String
  email: String
}

input UserUpdateWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutConversationsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutConversationsDataInput!
  create: UserCreateWithoutConversationsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  username_lower: String

  """All values that are not equal to given value."""
  username_lower_not: String

  """All values that are contained in given list."""
  username_lower_in: [String!]

  """All values that are not contained in given list."""
  username_lower_not_in: [String!]

  """All values less than the given value."""
  username_lower_lt: String

  """All values less than or equal the given value."""
  username_lower_lte: String

  """All values greater than the given value."""
  username_lower_gt: String

  """All values greater than or equal the given value."""
  username_lower_gte: String

  """All values containing the given string."""
  username_lower_contains: String

  """All values not containing the given string."""
  username_lower_not_contains: String

  """All values starting with the given string."""
  username_lower_starts_with: String

  """All values not starting with the given string."""
  username_lower_not_starts_with: String

  """All values ending with the given string."""
  username_lower_ends_with: String

  """All values not ending with the given string."""
  username_lower_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  conversations_every: ConversationWhereInput
  conversations_some: ConversationWhereInput
  conversations_none: ConversationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
